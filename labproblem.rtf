{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww12280\viewh12400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs24 \cf0 For your lab problem this week, you will get to build part of an Artificial Intelligence to play Funky Pong.\
\
Funky Pong is a popular online game in which you try to keep a ping pong ball bouncing on a paddle as long as you can.  If you hit the ball to one side of the paddle, it will go in that direction (with some randomness involved).\
\
Step 1: Download the starter code and play a game with manual control\
\
You might think that writing an AI to play Funky Pong would be simple -- you could just always hit the ball in the exact center of the paddle.  As it turns out, however, this is not a good strategy, and will only hit the ball 5 or 6 times on average before losing.  We have more information, however, such as the velocity of the ball.  Therefore, we might consider putting the paddle in the following position each time:\
\
(A + B * ball_x_velocity + C * ball_x_position, F + G * ball_y_velocity + H * ball_y_position)\
\
The problem is, we don't know what our values of A, B, C, F, G, and H should be.  Enter Particle Swarm Optimization (PSO).  We're going to use PSO to teach our computer how to play by having it play thousands of training games and continually updating better and better constant values.\
\
PSO works by setting up thousands of "particles" (in our case, a particle is the six-member array [A, B, C, F, G, H]) and initializing them with random positions and velocities.  At each point along its motion, a particle checks to see how well its current position performs (in our case, by playing hundreds of games of Funky Pong and seeing how well it does on average).  Each particle keeps track of the best position it has ever seen (it remembers the six values that made it play the best Funky Pong) and the entire swarm keeps track of the best position ever seen.  The particles fly around in space, but are pulled like gravity toward the best position both they and the swarm have seen.  Eventually, all the particles are pulled to the best-performing values, which we can then use in our Funky Pong AI!\
\
First, you need to set the particles to be randomly positioned, so they can swarm:\
\
Step 2: Fill in the randomizeParticles() method.  It needs to set up particlesPositions and particlesVelocities with random values and set particlesBest to be equal to particlesPositions (since at the beginning, each particle has only ever seen one position, so it has to assume it is the best possible position).\
\
Now that the particles are set up, they are ready to swarm.  We've written the code that uses PSO to update the velocity of the particles, but you need to update the position.\
\
Step 3: Fill in the updateParticlePosition(int index) method.  For each particle at position P, it needs to set P = P + ALPHA * V where V is the particle's velocity and ALPHA is a constant value provided to you.\
\
Step 4: Run your completed AI and watch it dominate!}